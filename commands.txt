docker is container that package the applciation  and run inside its container.

docker-compose.yml - file conatins container configuraion

docker-compose up -d // build and deploy and running in baxck ground

docker-compose stop // stop and doesnot remove

docker-compose down // remove container.




docker ps // list containers


load sql scripts into docker 
-i interactive
docker exec -i task-mate_mysql_1 sh -c 'mysql -uroot -p"$MYSQL_ROOT_PASSWORD" $MYSQL_DATABASE' < db/schema.sql


now we need to connect our fromnt end app to this db.

serverless mysql:  

in next js, we use vercel  is a service that allows us to deploy front end app.

vercel deploys our next js app to serverless env, and each api route is serverless function.



//apollo client configuraion

Apollo is a GraphQL client that allows us to easily query the exact data that we need from a GraphQL server.
In addition to fetching and mutating data, Apollo analyzes our queries and their results to constrcut a
client-side cache of our data.


Next js includes server side rendering and static site generation.

in order to render the data, we need to fetch first froms erver

Fetch data ---> Than call render function. because server side rendering is synchronus.

Apollo client is used to fecth the data for both client and server.

1. we write query using useQuery(GraphQLQuery); // this will get some data from server, useQuery hook is defined apollo client


index.js
import gql from 'graphql-tag'
import Link from 'next/link'
import { useQuery } from '@apollo/client'
import { initializeApollo } from '../apollo/client'

const ViewerQuery = gql`
  query ViewerQuery {
    viewer {
      id
      name
      status
    }
  }
`

const Index = () => {
  const {
    data: { viewer },
  } = useQuery(ViewerQuery)

  return (
    <div>
      You're signed in as {viewer.name} and you're {viewer.status} goto{' '}
      <Link href="/about">
        <a>static</a>
      </Link>{' '}
      page.
    </div>
  )
}

export async function getStaticProps() {
  const apolloClient = initializeApollo()

  await apolloClient.query({
    query: ViewerQuery,
  })

  return {
    props: {
      initialApolloState: apolloClient.cache.extract(),
    },
  }
}

export default Index

2. getStaticProps() function is used to get some data on the server during static site generation.

The index.js page is pre rendered at build time. getStaticProps() is aclled to fetch the data before any rendering occurs


// firstr initialize Apollo client
 const apolloClient = initializeApollo()

// when ruunog query using apolloClient , it caches the result
  await apolloClient.query({
    query: ViewerQuery,
  })


// then extarct caches 
 return {
    props: {
      initialApolloState: apolloClient.cache.extract(),
    },


this initialApolloState props is used in _app.js

Apollo client used below for making graphql api calls

1.  HttpLink on browser 
2.  SchemaLink on server


// Steps for apolloClient configuraion.

1. We adeed apolloClient to app (client.ts under lib folder) during serverless side rensering and static site generation.
   apolloClient gets the data  directly from resolvers(backend/resolvers.ts) and schema(backend/schema)
   and in the browser using HttpLink using api route (/api/graphql)

2. index.ts page  this page is rendered using static site generation before rendering

3. apolloClient stores the query result in the cache and we pass this cache via props called initialApolloState.

4. then we pass cache to _app.tsx via props. here we initialize apolloClient using useApollo(props.initialApolloState) 
hook and we pass this apolloClient to all child components using ApolloProvider


Types generation for front end
in the codegen.yml
documents: graphql/**/*.graphql  // in root graphql folder and sub folder file names ending with .graphql
   generates:
    generated/graphql-frontend.ts:
      plugins:
       - 'typescript'
       - 'typescript-operations'
       - "typescript-react-apollo"


npm i -D @graphql-codegen/typescript-operations   
npm i -D @graphql-codegen/typescript-react-apollo

"typescript-react-apollo" plugin generates custoem react hooks for queriees and mutations.

add queries under graphql/query.graphql

tasks.graphql

query Tasks {
  tasks {
    id
    title
    status
  }

  when we run npm run codegen , this will create Tasks gql qury with apolloClient warpper hooks.
  will see in graphql-frontend.ts



  component  => call useQuery(`gql query`) => apolloClient.useQuery => calls graphql server


 


